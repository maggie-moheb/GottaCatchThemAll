import java.util.ArrayList;

// general search algorithm presented in lecture 
// takes problem and qing_fun as input which is the algorithm 
// returns the final node or null for failure  
public class SearchGeneral {
	Node root;
	int MAX_DEPTH = 0;
	public Node General_Search(Problem problem, QING_FUN qing_fun) {
		root = new Node(); 
		root.MakeNode(problem.initialState);
		ArrayList<Node> nodes = new ArrayList<Node>();
		nodes.add(root);
		while(true) {
			if (nodes.size() == 0) return null; 
			Node front = nodes.remove(0);
			if (problem.passGoalTest(front.state)) return front;
			ArrayList<Node> children = problem.expand(front);
			nodes = GeneralQingFunc(qing_fun, nodes, children, problem);
		}
	}
	// Qing function for different algorithms 
	public ArrayList<Node> GeneralQingFunc(QING_FUN algorithm, ArrayList<Node> nodesSoFar,ArrayList<Node> nodesExpanded, Problem problem) {
		if(algorithm == QING_FUN.UCS) return UniformCostSearchQing(nodesSoFar, nodesExpanded);
		if(algorithm == QING_FUN.AStar) return AStarQing(nodesSoFar, nodesExpanded);
		if(algorithm == QING_FUN.DFS) return DepthFirstSearchQing(nodesSoFar, nodesExpanded); ;
		if(algorithm == QING_FUN.GR1) return GreedySearchQing(nodesSoFar, nodesExpanded, 1, problem);
		if(algorithm == QING_FUN.GR2) return GreedySearchQing(nodesSoFar, nodesExpanded, 2, problem);
		if(algorithm == QING_FUN.GR3) return GreedySearchQing(nodesSoFar, nodesExpanded, 3, problem);
		if(algorithm == QING_FUN.ID) return DepthLimitedSearchQing(nodesSoFar, nodesExpanded);

		return null; 
	}
	public ArrayList<Node> GreedySearchQing(ArrayList<Node> nodes, ArrayList<Node> children, int heuristic, Problem problem) {
		for(int i = 0; i<children.size(); i++) {
			switch(heuristic) {
			case 1:problem.setFirstHeuristic(nodes.get(i).heuristicCost) ;break;
			case 2:break;
			case 3:break;
			}
		}
	return nodes;
	}
	
	public ArrayList<Node> DepthLimitedSearchQing(ArrayList<Node> nodes, ArrayList<Node> children) {
		if(children.get(0).depth > MAX_DEPTH) {
			nodes.clear();
			nodes.add(root);
			MAX_DEPTH++;
		} 
		else {
			for(int i = 0; i< nodes.size() ; i++) {
				children.add(nodes.get(i));
			}
		}
		return children;
	}
	// Qing function for uniform cost search
	public ArrayList<Node> UniformCostSearchQing(ArrayList<Node> nodes, ArrayList<Node> newNodes) {
		nodes.addAll(newNodes);
		nodes.sort((o1, o2) -> o1.compareTo(o2));
		return nodes; 
	}
	// Qing function for A* 
	public ArrayList<Node> AStarQing(ArrayList<Node> nodes, ArrayList<Node> newNodes) {
		nodes.addAll(newNodes);
		nodes.sort((o1, o2) -> o1.compareToHeuristic(o2));
		return nodes; 
	}
	public static void main(String[]args ) {
		
		ArrayList<Node> nodes = new ArrayList<Node>(); 
		ArrayList<Node> newNodes = new ArrayList<Node>(); 
		for (int i = 3; i >= 0; i--) {
			Node node = new Node(i);
			Node node2 = new Node(i*2);
			nodes.add(node);
			newNodes.add(node2); 
		}
		SearchGeneral s = new SearchGeneral(); 
		nodes = s.DepthFirstSearchQing(nodes, newNodes);
		for(int i = 0; i < nodes.size(); i++) {
			System.out.println(nodes.get(i).pathCost);
		}
	}
	// Qing function for Depth first search
	public ArrayList<Node> DepthFirstSearchQing(ArrayList<Node> nodesSoFar, ArrayList<Node> children){		
		for(int i = 0; i<nodesSoFar.size(); i++){
		  children.add(nodesSoFar.get(i));
		}					
		return children;
	}
	// Qing function for Breadth first search
	public ArrayList<Node> BreadthFirstSearchQing(ArrayList<Node> nodesSoFar, ArrayList<Node> children){
		
		for(int i = 0; i<children.size(); i++){
		  nodesSoFar.add(nodesSoFar.get(i));
			}					
		return nodesSoFar;
	}
	
}

