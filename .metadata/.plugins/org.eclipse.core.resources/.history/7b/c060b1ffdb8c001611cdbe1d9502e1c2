
public class Node implements Comparable{
	State state;
	Node parent;
	Operator operator;
	int depth;
	int pathCost;
	int heuristicCost; 
	
	// create the root of the tree
	public Node MakeNode(State state) {
		return new Node(state,null,Operator.nill, 0,0);
	}
	public Node() {	
	}
	// just for testing 
	public Node(int p) {
		this.state = null;
		this.parent = null; 
		this.operator = null; 
		this.depth = 0; 
		this.pathCost = p;
	}
	
	// node constructor: State, operator used to reach this node, depth of the node, path cost to reach the node 
	public Node(State s, Node parent, Operator operator, int depth,int pathCost, int heuristicCost) {
		State state = new State(s.x, s.y, s.direction,s.pokemonsSoFar,s.xHatch); 
		this.state = state;
		this.parent = parent; 
		this.operator = operator; 
		this.depth = depth; 
		this.pathCost = pathCost; 
		this.heuristicCost = heuristicCost; 
	}
	public State getState() {
		return state;
	}
	public void setState(State state) {
		this.state = state;
	}
	public Node getParent() {
		return parent;
	}
	public void setParent(Node parent) {
		this.parent = parent;
	}
	public Operator getOperator() {
		return operator;
	}
	public void setOperator(Operator operator) {
		this.operator = operator;
	}
	public int getDepth() {
		return depth;
	}
	public void setDepth(int depth) {
		this.depth = depth;
	}
	public int getPathCost() {
		return pathCost;
	}
	public void setPathCost(int pathCost) {
		this.pathCost = pathCost;
	}
	@Override
	public int compareTo(Object o) {
		Node node = (Node) o;
		if(pathCost > node.pathCost) return 1; 
		if(pathCost < node.pathCost) return -1; 
		return 0; 
	}
	public int compareToHeuristic(Object o) {
		Node node = (Node) o;
		int cost = pathCost + heuristicCost; 
		int nodeCost = node.pathCost + node.heuristicCost; 
		if(cost > nodeCost) return 1; 
		if(cost < nodeCost) return -1; 
		return 0; 
	}
	
}
