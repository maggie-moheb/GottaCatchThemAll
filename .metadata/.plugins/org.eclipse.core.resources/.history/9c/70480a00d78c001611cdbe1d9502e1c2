import java.util.ArrayList;

// general search algorithm presented in lecture 
// takes problem and qing_fun as input which is the algorithm 
// returns the final node or null for failure  
public class SearchGeneral {
	public Node General_Search(Problem problem, QING_FUN qing_fun) {
		Node root = new Node(); 
		root.MakeNode(problem.initialState);
		ArrayList<Node> nodes = new ArrayList<>();
		nodes.add(root);
		while(true) {
			if (nodes.size() == 0) return null; 
			Node front = nodes.remove(0);
			if (problem.passGoalTest(front.state)) return front;
			ArrayList<Node> children = problem.expand(front);
			nodes = GeneralQingFunc(qing_fun, nodes, children);
		}
	}
	// Qing function for different algorithms 
	public ArrayList<Node> GeneralQingFunc(QING_FUN algorithm, ArrayList<Node> nodesSoFar,ArrayList<Node> nodesExpanded) {
		if(algorithm == QING_FUN.UCS) return UniformCostSearchQing(nodesSoFar, nodesExpanded);
		return null; 
	}
	// Qing function for uniform cost search
	public ArrayList<Node> UniformCostSearchQing(ArrayList<Node> nodes, ArrayList<Node> newNodes) {
		nodes.addAll(newNodes);
		nodes.sort((o1, o2) -> o1.compareTo(o2));
		return nodes; 
	}
	public static void main(String[]args ) {
		ArrayList<Node> nodes = new ArrayList<Node>(); 
		ArrayList<Node> newNodes = new ArrayList<Node>(); 
		for (int i = 3; i >= 0; i--) {
			Node node = new Node(null,null,null,0,i);
			Node node2 = new Node(null,null,null,0,i*2);
			nodes.add(node);
			newNodes.add(node2); 
		}
		SearchGeneral s = new SearchGeneral(); 
		nodes = s.UniformCostSearchQing(nodes, newNodes);
		for(int i = 0; i < nodes.size(); i++) {
			System.out.println(nodes.get(i).pathCost);
		}
	}
}

